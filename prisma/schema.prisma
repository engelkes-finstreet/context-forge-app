// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// BetterAuth Schema Models

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  emailVerified Boolean  @default(false)
  name          String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

// Context Forge Models

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  githubRepo  String?
  swaggerPath String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tasks Task[]

  @@map("projects")
}

model Task {
  id            String   @id @default(cuid())
  projectId     String
  name          String
  featureName String
  product     String
  role        String
  sharedContext String   @db.Text
  templateId    String?
  order         Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project  Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template TaskTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  subtasks Subtask[]

  @@index([projectId])
  @@index([templateId])
  @@map("tasks")
}

enum SubtaskType {
  GENERIC
  INQUIRY_PROCESS
  FORM
  MODAL
  REQUEST
}

model Subtask {
  id          String      @id @default(cuid())
  taskId      String
  name        String
  type        SubtaskType @default(GENERIC)
  content     String      @db.Text
  metadata    Json?
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@map("subtasks")
}

model TaskTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  usageCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subtaskTemplates SubtaskTemplate[]
  tasks            Task[]

  @@map("task_templates")
}

model SubtaskTemplate {
  id         String      @id @default(cuid())
  templateId String
  name       String
  type       SubtaskType
  content    String      @db.Text
  metadata   Json?
  order      Int
  required   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  template TaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([templateId])
  @@map("subtask_templates")
}
